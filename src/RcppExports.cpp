// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppArmadillo.h>
#include <RcppEnsmallen.h>
#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// standardize
arma::vec standardize(arma::vec x);
RcppExport SEXP _cm_standardize(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(standardize(x));
    return rcpp_result_gen;
END_RCPP
}
// pava
arma::vec pava(arma::vec a, arma::vec c, arma::vec b);
RcppExport SEXP _cm_pava(SEXP aSEXP, SEXP cSEXP, SEXP bSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec >::type a(aSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type c(cSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type b(bSEXP);
    rcpp_result_gen = Rcpp::wrap(pava(a, c, b));
    return rcpp_result_gen;
END_RCPP
}
// stress_optim
Rcpp::List stress_optim(arma::vec y, arma::mat X, arma::vec weights, int numBasis, int maxIterations, double armijoConstant, double wolfe, double minGradientNorm, double factr, int maxLineSearchTrials, double minStep, double maxStep);
RcppExport SEXP _cm_stress_optim(SEXP ySEXP, SEXP XSEXP, SEXP weightsSEXP, SEXP numBasisSEXP, SEXP maxIterationsSEXP, SEXP armijoConstantSEXP, SEXP wolfeSEXP, SEXP minGradientNormSEXP, SEXP factrSEXP, SEXP maxLineSearchTrialsSEXP, SEXP minStepSEXP, SEXP maxStepSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec >::type y(ySEXP);
    Rcpp::traits::input_parameter< arma::mat >::type X(XSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type weights(weightsSEXP);
    Rcpp::traits::input_parameter< int >::type numBasis(numBasisSEXP);
    Rcpp::traits::input_parameter< int >::type maxIterations(maxIterationsSEXP);
    Rcpp::traits::input_parameter< double >::type armijoConstant(armijoConstantSEXP);
    Rcpp::traits::input_parameter< double >::type wolfe(wolfeSEXP);
    Rcpp::traits::input_parameter< double >::type minGradientNorm(minGradientNormSEXP);
    Rcpp::traits::input_parameter< double >::type factr(factrSEXP);
    Rcpp::traits::input_parameter< int >::type maxLineSearchTrials(maxLineSearchTrialsSEXP);
    Rcpp::traits::input_parameter< double >::type minStep(minStepSEXP);
    Rcpp::traits::input_parameter< double >::type maxStep(maxStepSEXP);
    rcpp_result_gen = Rcpp::wrap(stress_optim(y, X, weights, numBasis, maxIterations, armijoConstant, wolfe, minGradientNorm, factr, maxLineSearchTrials, minStep, maxStep));
    return rcpp_result_gen;
END_RCPP
}
// kruskal_monanova
Rcpp::List kruskal_monanova(arma::vec y, arma::mat X, arma::vec w, bool verbose, int max_iter, double rel_tol);
RcppExport SEXP _cm_kruskal_monanova(SEXP ySEXP, SEXP XSEXP, SEXP wSEXP, SEXP verboseSEXP, SEXP max_iterSEXP, SEXP rel_tolSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec >::type y(ySEXP);
    Rcpp::traits::input_parameter< arma::mat >::type X(XSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type w(wSEXP);
    Rcpp::traits::input_parameter< bool >::type verbose(verboseSEXP);
    Rcpp::traits::input_parameter< int >::type max_iter(max_iterSEXP);
    Rcpp::traits::input_parameter< double >::type rel_tol(rel_tolSEXP);
    rcpp_result_gen = Rcpp::wrap(kruskal_monanova(y, X, w, verbose, max_iter, rel_tol));
    return rcpp_result_gen;
END_RCPP
}
// monotonic
Rcpp::List monotonic(arma::mat X, arma::vec y, arma::vec weights, arma::mat D, double lambda, int numBasis, int maxIterations, double armijoConstant, double wolfe, double minGradientNorm, double factr, int maxLineSearchTrials, double minStep, double maxStep);
RcppExport SEXP _cm_monotonic(SEXP XSEXP, SEXP ySEXP, SEXP weightsSEXP, SEXP DSEXP, SEXP lambdaSEXP, SEXP numBasisSEXP, SEXP maxIterationsSEXP, SEXP armijoConstantSEXP, SEXP wolfeSEXP, SEXP minGradientNormSEXP, SEXP factrSEXP, SEXP maxLineSearchTrialsSEXP, SEXP minStepSEXP, SEXP maxStepSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type X(XSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type y(ySEXP);
    Rcpp::traits::input_parameter< arma::vec >::type weights(weightsSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type D(DSEXP);
    Rcpp::traits::input_parameter< double >::type lambda(lambdaSEXP);
    Rcpp::traits::input_parameter< int >::type numBasis(numBasisSEXP);
    Rcpp::traits::input_parameter< int >::type maxIterations(maxIterationsSEXP);
    Rcpp::traits::input_parameter< double >::type armijoConstant(armijoConstantSEXP);
    Rcpp::traits::input_parameter< double >::type wolfe(wolfeSEXP);
    Rcpp::traits::input_parameter< double >::type minGradientNorm(minGradientNormSEXP);
    Rcpp::traits::input_parameter< double >::type factr(factrSEXP);
    Rcpp::traits::input_parameter< int >::type maxLineSearchTrials(maxLineSearchTrialsSEXP);
    Rcpp::traits::input_parameter< double >::type minStep(minStepSEXP);
    Rcpp::traits::input_parameter< double >::type maxStep(maxStepSEXP);
    rcpp_result_gen = Rcpp::wrap(monotonic(X, y, weights, D, lambda, numBasis, maxIterations, armijoConstant, wolfe, minGradientNorm, factr, maxLineSearchTrials, minStep, maxStep));
    return rcpp_result_gen;
END_RCPP
}
// b_spline
arma::mat b_spline(arma::vec x, arma::vec knots, int degree, arma::vec boundaries, bool center, bool intercept);
RcppExport SEXP _cm_b_spline(SEXP xSEXP, SEXP knotsSEXP, SEXP degreeSEXP, SEXP boundariesSEXP, SEXP centerSEXP, SEXP interceptSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec >::type x(xSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type knots(knotsSEXP);
    Rcpp::traits::input_parameter< int >::type degree(degreeSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type boundaries(boundariesSEXP);
    Rcpp::traits::input_parameter< bool >::type center(centerSEXP);
    Rcpp::traits::input_parameter< bool >::type intercept(interceptSEXP);
    rcpp_result_gen = Rcpp::wrap(b_spline(x, knots, degree, boundaries, center, intercept));
    return rcpp_result_gen;
END_RCPP
}
// tri_mat
arma::mat tri_mat(int dim);
RcppExport SEXP _cm_tri_mat(SEXP dimSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type dim(dimSEXP);
    rcpp_result_gen = Rcpp::wrap(tri_mat(dim));
    return rcpp_result_gen;
END_RCPP
}
// diff_mat
arma::mat diff_mat(int n, int p, int difference, bool intercept, bool multiply);
RcppExport SEXP _cm_diff_mat(SEXP nSEXP, SEXP pSEXP, SEXP differenceSEXP, SEXP interceptSEXP, SEXP multiplySEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type n(nSEXP);
    Rcpp::traits::input_parameter< int >::type p(pSEXP);
    Rcpp::traits::input_parameter< int >::type difference(differenceSEXP);
    Rcpp::traits::input_parameter< bool >::type intercept(interceptSEXP);
    Rcpp::traits::input_parameter< bool >::type multiply(multiplySEXP);
    rcpp_result_gen = Rcpp::wrap(diff_mat(n, p, difference, intercept, multiply));
    return rcpp_result_gen;
END_RCPP
}
// GCV_cpp
Rcpp::List GCV_cpp(arma::vec y, arma::vec x, arma::vec k, int degree, int difference, arma::vec boundaries, arma::vec lambda_range);
RcppExport SEXP _cm_GCV_cpp(SEXP ySEXP, SEXP xSEXP, SEXP kSEXP, SEXP degreeSEXP, SEXP differenceSEXP, SEXP boundariesSEXP, SEXP lambda_rangeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec >::type y(ySEXP);
    Rcpp::traits::input_parameter< arma::vec >::type x(xSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type k(kSEXP);
    Rcpp::traits::input_parameter< int >::type degree(degreeSEXP);
    Rcpp::traits::input_parameter< int >::type difference(differenceSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type boundaries(boundariesSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type lambda_range(lambda_rangeSEXP);
    rcpp_result_gen = Rcpp::wrap(GCV_cpp(y, x, k, degree, difference, boundaries, lambda_range));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_cm_standardize", (DL_FUNC) &_cm_standardize, 1},
    {"_cm_pava", (DL_FUNC) &_cm_pava, 3},
    {"_cm_stress_optim", (DL_FUNC) &_cm_stress_optim, 12},
    {"_cm_kruskal_monanova", (DL_FUNC) &_cm_kruskal_monanova, 6},
    {"_cm_monotonic", (DL_FUNC) &_cm_monotonic, 14},
    {"_cm_b_spline", (DL_FUNC) &_cm_b_spline, 6},
    {"_cm_tri_mat", (DL_FUNC) &_cm_tri_mat, 1},
    {"_cm_diff_mat", (DL_FUNC) &_cm_diff_mat, 5},
    {"_cm_GCV_cpp", (DL_FUNC) &_cm_GCV_cpp, 7},
    {NULL, NULL, 0}
};

RcppExport void R_init_cm(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
